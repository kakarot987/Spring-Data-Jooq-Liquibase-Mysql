/*
 * This file is generated by jOOQ.
 */
package co.db.jooq.tables;


import co.db.jooq.DefaultSchema;
import co.db.jooq.Keys;
import co.db.jooq.tables.records.ModelRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Model extends TableImpl<ModelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>model</code>
     */
    public static final Model MODEL = new Model();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModelRecord> getRecordType() {
        return ModelRecord.class;
    }

    /**
     * The column <code>model.model_id</code>.
     */
    public final TableField<ModelRecord, Integer> MODEL_ID = createField(DSL.name("model_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>model.model_name</code>.
     */
    public final TableField<ModelRecord, String> MODEL_NAME = createField(DSL.name("model_name"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>model.model_instaURL</code>.
     */
    public final TableField<ModelRecord, String> MODEL_INSTAURL = createField(DSL.name("model_instaURL"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>model.model_dpURL</code>.
     */
    public final TableField<ModelRecord, String> MODEL_DPURL = createField(DSL.name("model_dpURL"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>model.model_gender</code>.
     */
    public final TableField<ModelRecord, String> MODEL_GENDER = createField(DSL.name("model_gender"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>model.model_born</code>.
     */
    public final TableField<ModelRecord, String> MODEL_BORN = createField(DSL.name("model_born"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>model.model_nationality</code>.
     */
    public final TableField<ModelRecord, String> MODEL_NATIONALITY = createField(DSL.name("model_nationality"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>model.model_height</code>.
     */
    public final TableField<ModelRecord, String> MODEL_HEIGHT = createField(DSL.name("model_height"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>model.model_figure</code>.
     */
    public final TableField<ModelRecord, String> MODEL_FIGURE = createField(DSL.name("model_figure"), SQLDataType.VARCHAR(20), this, "");

    private Model(Name alias, Table<ModelRecord> aliased) {
        this(alias, aliased, null);
    }

    private Model(Name alias, Table<ModelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>model</code> table reference
     */
    public Model(String alias) {
        this(DSL.name(alias), MODEL);
    }

    /**
     * Create an aliased <code>model</code> table reference
     */
    public Model(Name alias) {
        this(alias, MODEL);
    }

    /**
     * Create a <code>model</code> table reference
     */
    public Model() {
        this(DSL.name("model"), null);
    }

    public <O extends Record> Model(Table<O> child, ForeignKey<O, ModelRecord> key) {
        super(child, key, MODEL);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ModelRecord> getPrimaryKey() {
        return Keys.KEY_MODEL_PRIMARY;
    }

    @Override
    public List<UniqueKey<ModelRecord>> getKeys() {
        return Arrays.<UniqueKey<ModelRecord>>asList(Keys.KEY_MODEL_PRIMARY, Keys.KEY_MODEL_MODEL_ID, Keys.KEY_MODEL_MODEL_INSTAURL, Keys.KEY_MODEL_MODEL_DPURL, Keys.KEY_MODEL_MODEL_HEIGHT);
    }

    @Override
    public Model as(String alias) {
        return new Model(DSL.name(alias), this);
    }

    @Override
    public Model as(Name alias) {
        return new Model(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Model rename(String name) {
        return new Model(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Model rename(Name name) {
        return new Model(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
