/*
 * This file is generated by jOOQ.
 */
package co.db.jooq.tables.daos;


import co.db.jooq.tables.Model;
import co.db.jooq.tables.records.ModelRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ModelDao extends DAOImpl<ModelRecord, co.db.jooq.tables.pojos.Model, Integer> {

    /**
     * Create a new ModelDao without any configuration
     */
    public ModelDao() {
        super(Model.MODEL, co.db.jooq.tables.pojos.Model.class);
    }

    /**
     * Create a new ModelDao with an attached configuration
     */
    @Autowired
    public ModelDao(Configuration configuration) {
        super(Model.MODEL, co.db.jooq.tables.pojos.Model.class, configuration);
    }

    @Override
    public Integer getId(co.db.jooq.tables.pojos.Model object) {
        return object.getModelId();
    }

    /**
     * Fetch records that have <code>model_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<co.db.jooq.tables.pojos.Model> fetchRangeOfModelId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Model.MODEL.MODEL_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>model_id IN (values)</code>
     */
    public List<co.db.jooq.tables.pojos.Model> fetchByModelId(Integer... values) {
        return fetch(Model.MODEL.MODEL_ID, values);
    }

    /**
     * Fetch a unique record that has <code>model_id = value</code>
     */
    public co.db.jooq.tables.pojos.Model fetchOneByModelId(Integer value) {
        return fetchOne(Model.MODEL.MODEL_ID, value);
    }

    /**
     * Fetch records that have <code>model_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<co.db.jooq.tables.pojos.Model> fetchRangeOfModelName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Model.MODEL.MODEL_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>model_name IN (values)</code>
     */
    public List<co.db.jooq.tables.pojos.Model> fetchByModelName(String... values) {
        return fetch(Model.MODEL.MODEL_NAME, values);
    }

    /**
     * Fetch records that have <code>model_instaURL BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<co.db.jooq.tables.pojos.Model> fetchRangeOfModelInstaurl(String lowerInclusive, String upperInclusive) {
        return fetchRange(Model.MODEL.MODEL_INSTAURL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>model_instaURL IN (values)</code>
     */
    public List<co.db.jooq.tables.pojos.Model> fetchByModelInstaurl(String... values) {
        return fetch(Model.MODEL.MODEL_INSTAURL, values);
    }

    /**
     * Fetch a unique record that has <code>model_instaURL = value</code>
     */
    public co.db.jooq.tables.pojos.Model fetchOneByModelInstaurl(String value) {
        return fetchOne(Model.MODEL.MODEL_INSTAURL, value);
    }

    /**
     * Fetch records that have <code>model_gender BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<co.db.jooq.tables.pojos.Model> fetchRangeOfModelGender(String lowerInclusive, String upperInclusive) {
        return fetchRange(Model.MODEL.MODEL_GENDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>model_gender IN (values)</code>
     */
    public List<co.db.jooq.tables.pojos.Model> fetchByModelGender(String... values) {
        return fetch(Model.MODEL.MODEL_GENDER, values);
    }

    /**
     * Fetch records that have <code>model_born BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<co.db.jooq.tables.pojos.Model> fetchRangeOfModelBorn(String lowerInclusive, String upperInclusive) {
        return fetchRange(Model.MODEL.MODEL_BORN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>model_born IN (values)</code>
     */
    public List<co.db.jooq.tables.pojos.Model> fetchByModelBorn(String... values) {
        return fetch(Model.MODEL.MODEL_BORN, values);
    }

    /**
     * Fetch records that have <code>model_nationality BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<co.db.jooq.tables.pojos.Model> fetchRangeOfModelNationality(String lowerInclusive, String upperInclusive) {
        return fetchRange(Model.MODEL.MODEL_NATIONALITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>model_nationality IN (values)</code>
     */
    public List<co.db.jooq.tables.pojos.Model> fetchByModelNationality(String... values) {
        return fetch(Model.MODEL.MODEL_NATIONALITY, values);
    }

    /**
     * Fetch records that have <code>model_height BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<co.db.jooq.tables.pojos.Model> fetchRangeOfModelHeight(String lowerInclusive, String upperInclusive) {
        return fetchRange(Model.MODEL.MODEL_HEIGHT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>model_height IN (values)</code>
     */
    public List<co.db.jooq.tables.pojos.Model> fetchByModelHeight(String... values) {
        return fetch(Model.MODEL.MODEL_HEIGHT, values);
    }

    /**
     * Fetch a unique record that has <code>model_height = value</code>
     */
    public co.db.jooq.tables.pojos.Model fetchOneByModelHeight(String value) {
        return fetchOne(Model.MODEL.MODEL_HEIGHT, value);
    }

    /**
     * Fetch records that have <code>model_figure BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<co.db.jooq.tables.pojos.Model> fetchRangeOfModelFigure(String lowerInclusive, String upperInclusive) {
        return fetchRange(Model.MODEL.MODEL_FIGURE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>model_figure IN (values)</code>
     */
    public List<co.db.jooq.tables.pojos.Model> fetchByModelFigure(String... values) {
        return fetch(Model.MODEL.MODEL_FIGURE, values);
    }
}
